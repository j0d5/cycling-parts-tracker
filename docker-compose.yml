version: '3.9'

# explicit names make it easier to reference containers
services:
  client:
    container_name: client
    image: client
    ports:
      - 8081:80

    # ensures an API is available
    depends_on:
      server:
        condition: service_healthy

    # nginx's default image is based on debian, so we can use
    # 'service' to check the health of the process instead of
    # curl/wget against localhost
    healthcheck:
      test: service nginx status || exit 1
      interval: 15s
      timeout: 5s
      retries: 3

  server:
    container_name: server
    image: server
    ports:
      - 3000:3000
    env_file:
      - .env

    # override the ENVIRONMENT variable set in the file
    environment:
      - ENVIRONMENT=docker
      - DATABASE_HOST=mariadb # this has to match the name of the database service being used!

    # node's alpine image doesn't bundle curl by default, so
    # we use wget to query a basic GET endpoint
    healthcheck:
      test: wget localhost:3000/api/health -q -O - > /dev/null 2>&1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      mariadb:
        condition: service_started

  # swagger-ui:
  #   container_name: swagger
  #   image: 'swaggerapi/swagger-ui:v3.25.0'
  #   ports:
  #     - '8082:8080'
  #   volumes:
  #     - ./${SWAGGER_JSON_FILE}:/usr/share/spec/${SWAGGER_JSON_FILE}
  #   environment:
  #     SWAGGER_JSON: /usr/share/spec/${SWAGGER_JSON_FILE}
  #   healthcheck:
  #     test: ['CMD', 'wget', 'localhost:8081 -q -O - > /dev/null 2>&1']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  mariadb:
    container_name: mariadb
    image: mariadb:latest
    ports:
      - 3306:3306
    environment:
      - MYSQL_USER=${DATABASE_USERNAME?REQUIRED}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD?REQUIRED}
      - MYSQL_DATABASE=${DATABASE_NAME?REQUIRED}
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD?REQUIRED}
    volumes:
      - ./mariadb_data:/var/lib/mysql
    restart: on-failure
    healthcheck:
      test:
        [
          'CMD',
          'mysqladmin',
          'ping',
          '-h',
          'localhost',
          '--password=$DATABASE_PASSWORD',
        ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
